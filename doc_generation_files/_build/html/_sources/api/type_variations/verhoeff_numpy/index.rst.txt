type_variations.verhoeff_numpy
==============================

.. py:module:: type_variations.verhoeff_numpy


Functions
---------

.. autoapisummary::

   type_variations.verhoeff_numpy.stutterize
   type_variations.verhoeff_numpy.selectOdds
   type_variations.verhoeff_numpy.multiset
   type_variations.verhoeff_numpy.permutations
   type_variations.verhoeff_numpy.stutterPermutations
   type_variations.verhoeff_numpy.createZigZagPath
   type_variations.verhoeff_numpy.cutCycle
   type_variations.verhoeff_numpy.incorporateSpurInZigZag
   type_variations.verhoeff_numpy.incorporateSpursInZigZag
   type_variations.verhoeff_numpy.createSquareTube
   type_variations.verhoeff_numpy.swapPair
   type_variations.verhoeff_numpy.extend
   type_variations.verhoeff_numpy.HpathNS


Module Contents
---------------

.. py:function:: stutterize(perm: numpy.array) -> numpy.ndarray

   Converts argument into stutter permutation by repeating every number.


.. py:function:: selectOdds(sig: numpy.array) -> numpy.array

   Returns list of numbers with odd occurrence frequencies in the given signature.


.. py:function:: multiset(freq: numpy.array) -> numpy.ndarray

   Generates the lexicographically smallest list with given occurrence frequencies.


.. py:function:: permutations(s: numpy.array) -> numpy.ndarray

   Generates all possible permutations of a given list of integers.


.. py:function:: stutterPermutations(s: numpy.array) -> numpy.ndarray

   Generates stutter permutations of a given list of integers.


.. py:function:: createZigZagPath(c: numpy.ndarray, uv: numpy.ndarray) -> numpy.ndarray

   :param c: cycle of even length, numpy array
   :param uv: arrays to append [u, v]
   :return: cycle obtained by combining two "parallel" copies of given cycle, to form a 'square wave',
           running from cycle[[1]]v to cycle[[-1]]v; the two copies are distinguished by
           appending u and v; also works for a path


.. py:function:: cutCycle(c: numpy.ndarray, a: numpy.array) -> numpy.ndarray

   Splits a cycle at vertex a. Vertex a appears on first place


.. py:function:: incorporateSpurInZigZag(path: numpy.ndarray, vertex_pair: numpy.ndarray) -> numpy.ndarray

.. py:function:: incorporateSpursInZigZag(path: numpy.ndarray, vertices: numpy.ndarray, spur_suffixes: numpy.ndarray) -> numpy.ndarray

.. py:function:: createSquareTube(path: numpy.ndarray, u: numpy.array, v: numpy.array) -> numpy.ndarray

.. py:function:: swapPair(perm: numpy.ndarray, i: int, j=None) -> numpy.ndarray

   Swaps elements in perm at positions i and j (or i and i+1 if j is not provided).


.. py:function:: extend(lst: numpy.ndarray, e: numpy.ndarray) -> numpy.ndarray

   Extend every item in l with e
   :param lst: numpy array of arrays of integers
   :param e: array to extend every item in l with
   :return:


.. py:function:: HpathNS(k0: int, k1: int) -> numpy.ndarray

   Computes a Hamiltonian path in the neighbor-swap graph on the non-stutter permutations for the given signature.
   If k0 and k1 are both even, the path is a Hamiltonian cycle.

   :param k0: Number of 0s in the signature.
   :type k0: int
   :param k1: Number of 1s in the signature.
   :type k1: int

   :returns: A Hamiltonian path in the neighbor-swap graph G(0^k_0|1^(k_1)).
   :rtype: np.ndarray

   .. rubric:: References

   - Tom Verhoeff. The spurs of D. H. Lehmer: Hamiltonian paths in neighbor-swap graphs of permutations. Designs, Codes, and Cryptography, 84(1-2):295-310, 7 2017.


