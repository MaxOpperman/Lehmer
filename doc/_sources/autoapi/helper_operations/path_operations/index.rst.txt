helper_operations.path_operations
=================================

.. py:module:: helper_operations.path_operations


Functions
---------

.. autoapisummary::

   helper_operations.path_operations.adjacent
   helper_operations.path_operations.pathQ
   helper_operations.path_operations.cycleQ
   helper_operations.path_operations.pathEdges
   helper_operations.path_operations.stichPaths
   helper_operations.path_operations.splitPathIn2
   helper_operations.path_operations.cutCycle
   helper_operations.path_operations.spurBaseIndex
   helper_operations.path_operations.neighbor
   helper_operations.path_operations.mul
   helper_operations.path_operations.createZigZagPath
   helper_operations.path_operations.incorporateSpurInZigZag
   helper_operations.path_operations.incorporateSpursInZigZag
   helper_operations.path_operations.createSquareTube
   helper_operations.path_operations.get_transformer
   helper_operations.path_operations.transform
   helper_operations.path_operations.transform_cycle_cover
   helper_operations.path_operations.recursive_cycle_check


Module Contents
---------------

.. py:function:: adjacent(s: tuple[int, Ellipsis], t: tuple[int, Ellipsis]) -> bool

   returns true if s and t adjacent, false otherwise


.. py:function:: pathQ(p: list[tuple[int, Ellipsis]], verbose=True) -> bool

   Returns True if p a path.
   :param verbose: whether the error in the path should be printed in console
   :param p, list of vertices
   :return: true if p is a path


.. py:function:: cycleQ(c: list[tuple[int, Ellipsis]]) -> bool

   Returns True if c a cycle.


.. py:function:: pathEdges(p: list[tuple[int, Ellipsis]]) -> list[list[tuple[int, Ellipsis]]]

   Returns a list of edges of a path. (Path is given as a list of adjacent vertices)


.. py:function:: stichPaths(p1: list[tuple[int, Ellipsis]], p2: list[tuple[int, Ellipsis]]) -> list[tuple[int, Ellipsis]]

   Stitches two parallel paths by gluing the end vertices.


.. py:function:: splitPathIn2(p: list[tuple[int, Ellipsis]], a: tuple[int, Ellipsis]) -> tuple[list[tuple[int, Ellipsis]], list[tuple[int, Ellipsis]]]

   Splits a path at vertex a. Element a appears in only the first path.


.. py:function:: cutCycle(c: list[tuple[int, Ellipsis]], a: tuple[int, Ellipsis]) -> list[tuple[int, Ellipsis]]

   Splits a cycle at vertex a. Vertex a appears on first place


.. py:function:: spurBaseIndex(path: list[tuple[int, Ellipsis]], vertex: tuple[int, Ellipsis]) -> int

   Determines index of base of spur for given path and spur tip. Returns the index of the base of the spur or raises an error.


.. py:function:: neighbor(p: tuple[int, Ellipsis], q: tuple[int, Ellipsis]) -> bool

   Returns True if p and q differ by a swap of two adjacent elements, False otherwise.


.. py:function:: mul(sez: list[tuple[int, Ellipsis]], e: int) -> list[tuple[int, Ellipsis]]

   Adds 'e' to all elements(lists) in list sez


.. py:function:: createZigZagPath(c: list[tuple[int, Ellipsis]], u: tuple[int, Ellipsis], v: tuple[int, Ellipsis]) -> list[tuple[int, Ellipsis]]

   :param c: cycle as a list of tuples
   :param u: tuple to append
   :param v: tuple to append
   :return: cycle obtained by combining two "parallel" copies of given cycle, to form a 'square wave',
           running from cycle[[1]]v to cycle[[-1]]v; the two copies are distinguished by
           appending u and v; also works for a path


.. py:function:: incorporateSpurInZigZag(path: list[tuple[int, Ellipsis]], vertex_pair: tuple[tuple[int, Ellipsis], tuple[int, Ellipsis]]) -> list[tuple[int, Ellipsis]]

   Incorporates a spur in a zigzag path.
   @param path: list of vertices, a zigzag path
   @param vertex_pair: a pair of vertices to incorporate
   @return: list of vertices, the zigzag path with the spur incorporated


.. py:function:: incorporateSpursInZigZag(path: list[tuple[int, Ellipsis]], vertices: list[tuple[int, Ellipsis]], spur_suffixes: list[tuple[int, Ellipsis]]) -> list[tuple[int, Ellipsis]]

   Incorporates a list of spurs in a zigzag path.
   @param path: list of vertices, a zigzag path
   @param vertices: list of vertices to incorporate
   @param spur_suffixes: list of spur suffixes (suffixes for the vertices variable)
   @return: list of vertices, the zigzag path with the spurs incorporated


.. py:function:: createSquareTube(path: list[tuple], u: tuple, v: tuple) -> list[tuple[int, Ellipsis]]

   Creates a square tube from a path by appending combinations of `u` and `v` like so:
   `uu, uv, vv, vu, vu, vv, uv, uu` and ending with `uu, uv, vv, vu, vu, uu, uv, vv`
   @param path: list of vertices, a path
   @param u: tuple to append
   @param v: tuple adjacent to u to append
   @return: list of vertices, the square tube. Every vertex in the original path is repeated 4 times.


.. py:function:: get_transformer(s: list[int], func: callable) -> tuple[list[int], list[int]]

   Sorts the signature using a given function and provides array to transform it back
   @param s: signature as a list of integers
   @param func: lambda function of tuples of form (value, index) to sort the signature
   @return: tuple of two lists of integers;
       the first list is the sorted signature,
       the second list is the transformation array (used in `tranform`)


.. py:function:: transform(lis: list[tuple[int, Ellipsis]], tr: list[int]) -> list[tuple[int, Ellipsis]]

   Transforms a list of permutations as tuples according to the given renaming.
   @param lis: list of permutations
   @param tr: transformation list, int at index i is the new name for i
   @return: list of lists of transformed permutations


.. py:function:: transform_cycle_cover(lis3d: list[list[tuple[int, Ellipsis]]], tr: list[int]) -> list[list[tuple[int, Ellipsis]]]

   Transforms a list of unknown depth holding a list of permutations according to the given renaming. Used for the cycle cover.
   @param lis: list of lists of permutations
   @param tr: transformation list, int at index i is the new name for i
   @return: list of lists of transformed permutations


.. py:function:: recursive_cycle_check(cycle, total_length=0) -> int

   Recursively check whether the given list is a cycle.
   @param cycle: list of cycles
   @param total_length: total length of the cycle, starts at 0.
   @return: total length of the list of cycles


